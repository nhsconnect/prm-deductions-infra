#!/usr/bin/env bash

set -Eeo pipefail

export AWS_DEFAULT_REGION=eu-west-2
NHS_SERVICE=deductions-infra
DEDUCTIONS_INFRA_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

if [ -z "${DNS_IMAGE_TAG}" ]; then
  DNS_IMAGE_TAG="${GO_DEPENDENCY_LABEL_DOCKER_DNS_IMAGES}"
fi

AWS_HELPERS_FILE="utils/aws-helpers"
AWS_HELPERS_VERSION=0.2.1
mkdir -p utils
if [[ ! -f $AWS_HELPERS_FILE ]];then
  wget --quiet -O $AWS_HELPERS_FILE https://github.com/nhsconnect/prm-deductions-support-infra/releases/download/${AWS_HELPERS_VERSION}/aws-helpers
fi
chmod +x $AWS_HELPERS_FILE
source $AWS_HELPERS_FILE

if [ -z "${DNS_IMAGE_TAG}" ]; then
  DNS_IMAGE_TAG="${GO_DEPENDENCY_LABEL_DOCKER_DNS_IMAGES}"
fi

if [ -z "${MHS_IMAGE_TAG}" ]; then
  MHS_IMAGE_TAG="${GO_DEPENDENCY_LABEL_DOCKER_DNS_IMAGES}"
fi

function check_env {
  if [[ -z "${NHS_ENVIRONMENT}" ]]; then
    echo "Must set NHS_ENVIRONMENT"
    exit 1
  fi
}

function tf_init {
  check_env
  #  Condition [ $NHS_ENVIRONMENT == "test" ] is required as test environment infrastructure is deployed in CI AWS account
  [ $NHS_ENVIRONMENT == "ci" ] || [ $NHS_ENVIRONMENT == "test" ] && bucket_env_infix="" || bucket_env_infix="$NHS_ENVIRONMENT-"

  cd "${DEDUCTIONS_INFRA_DIR}/terraform/"

  terraform init -reconfigure \
    -backend-config key="${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate" \
    -backend-config bucket="prm-deductions-${bucket_env_infix}terraform-state" \
    -backend-config dynamodb_table="prm-deductions-${bucket_env_infix}terraform-table" \
    -backend-config region=${AWS_DEFAULT_REGION}
}

function tf_plan {
  check_env
  operation=$1
  certs=$2

  if [ -z "${DNS_IMAGE_TAG}" ]; then
    echo "DNS image tag has to be set"
    exit 1
  fi

  TARGET=""

  cd "${DEDUCTIONS_INFRA_DIR}/terraform/"

  if [[ "${certs}" == "true" ]]; then
    TARGET="-target=module.deductions-private.aws_acm_certificate.mq-admin-cert -target=module.deductions-private.aws_acm_certificate.gp2gp-adaptor-cert"
  fi

  aws_account_arn=$(aws sts get-caller-identity | jq -r .Arn)

  if [[ $aws_account_arn =~ "gocd_agent-prod" || $aws_account_arn =~ "repository-ci-agent" ]]; then
    COMMON_ACCOUNT_ROLE="repository-ci-agent"
  else
    COMMON_ACCOUNT_ROLE="RepoAdmin"
  fi

  COMMON_ACCOUNT_ID=$(_get_aws_ssm_secret "/repo/ci/user-input/external/aws-account-id")

  tf_init
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -var unbound_image_version=${DNS_IMAGE_TAG} -var common_account_id=${COMMON_ACCOUNT_ID} -var common_account_role=${COMMON_ACCOUNT_ROLE} -var-file=${NHS_ENVIRONMENT}.tfvars $TARGET -out="nhs_deployment.tfplan"
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -var unbound_image_version=${DNS_IMAGE_TAG} -var common_account_id=${COMMON_ACCOUNT_ID} -var common_account_role=${COMMON_ACCOUNT_ROLE} -var-file=${NHS_ENVIRONMENT}.tfvars -out="nhs_deployment.tfplan" -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply {
  check_env
  tf_init
  terraform get # modules
  terraform apply nhs_deployment.tfplan
  terraform output -json > tf-out.json
}

function tf_init_cross_account {
  check_env
  [ $NHS_ENVIRONMENT == "ci" ] && bucket_env_infix="" || bucket_env_infix="$NHS_ENVIRONMENT-"

  cd "${DEDUCTIONS_INFRA_DIR}/terraform-cross-account/"

  terraform init -reconfigure \
    -backend-config key="${NHS_SERVICE}-cross-account-${NHS_ENVIRONMENT}/terraform.tfstate" \
    -backend-config bucket="prm-deductions-${bucket_env_infix}terraform-state" \
    -backend-config dynamodb_table="prm-deductions-${bucket_env_infix}terraform-table" \
    -backend-config region=${AWS_DEFAULT_REGION}
}

function tf_plan_cross_account {
  check_env
  operation=$1

  tf_init_cross_account
  terraform get # modules
  if [[ "${operation}" == "create" ]]; then
    terraform plan -out="nhs_deployment_cross_account.tfplan" -var-file=${NHS_ENVIRONMENT}.tfvars
  elif [[ "${operation}" == "destroy" ]]; then
    terraform plan -out="nhs_deployment_cross_account.tfplan" -var-file=${NHS_ENVIRONMENT}.tfvars -destroy
  else
    echo "Unknown operation (should be create or destroy), got: ${operation}"
    exit 1
  fi
}

function tf_apply_cross_account {
  check_env

  tf_init_cross_account
  terraform get # modules
  terraform apply nhs_deployment_cross_account.tfplan
  terraform output -json > tf-out.json
}

function setup_vpn_ca {
  if [[ ! -d "easy-rsa" ]]; then
    git clone https://github.com/OpenVPN/easy-rsa.git
  fi
  cd easy-rsa/easyrsa3
  echo yes | ./easyrsa init-pki
  cd pki
  echo "$(_get_aws_ssm_secret "/repo/user-input/vpn-ca-crt")" > ca.crt
  echo "$(_get_aws_ssm_secret "/repo/user-input/vpn-ca-key")" > private/ca.key
  echo "$(_get_aws_ssm_secret "/repo/user-input/vpn-ca-serial")" > serial
  touch index.txt
  touch index.txt.attr
  mkdir -p certs_by_serial
  mkdir -p issued
  cd ..
}

function generate_vpn_ca {
  if [[ ! -d "easy-rsa" ]]; then
    git clone https://github.com/OpenVPN/easy-rsa.git
  fi
  cd easy-rsa/easyrsa3
  ./easyrsa init-pki
  EASYRSA_BATCH=true EASYRSA_REQ_CN="vpn.patient-deductions.nhs.uk" ./easyrsa build-ca nopass
  create_secret_ssm_param "/repo/user-input/vpn-ca-crt" "$(cat pki/ca.crt)"
  create_secret_ssm_param "/repo/user-input/vpn-ca-key" "$(cat pki/private/ca.key)"
  create_secret_ssm_param "/repo/user-input/vpn-ca-serial" "$(cat pki/serial)"
}

function generate_vpn_server_crt {
  check_env
  crt_id="${NHS_ENVIRONMENT}.vpn.patient-deductions.nhs.uk"
  existing_crt="$(aws acm list-certificates | jq -r --arg crt_id "$crt_id" '.CertificateSummaryList[] | select(.DomainName==$crt_id)')"
  if [[ -z $existing_crt ]]; then
    setup_vpn_ca
    ./easyrsa build-server-full $crt_id nopass

    aws acm import-certificate --certificate fileb://pki/issued/$crt_id.crt --private-key fileb://pki/private/$crt_id.key --certificate-chain fileb://pki/ca.crt
  else
    echo "Server certificate $crt_id already exists"
  fi
}

function generate_vpn_client_crt {
  check_env
  if [[ -z $1 ]]; then
    echo "Username required"
    exit 1
  fi
  username="$1"
  crt_id="$username.vpn.patient-deductions.nhs.uk"

  setup_vpn_ca
  if [[ ! -f pki/private/$crt_id.key ]]; then
    echo "Client key file not present. Generating now."
    ./easyrsa build-client-full $crt_id nopass
  fi

  client_crt="$(cat pki/issued/$crt_id.crt)"
  client_key="$(cat pki/private/$crt_id.key)"

  client_vpn_endpoint_id=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/output/prm-deductions-infra/client-vpn-endpoint-id")
  config="$(aws ec2 export-client-vpn-client-configuration --client-vpn-endpoint-id $client_vpn_endpoint_id | jq -r ".ClientConfiguration")"

  cd ../..
  dirname="client-config"
  mkdir -p $dirname
  cd $dirname
  filename="${NHS_ENVIRONMENT}.$username.ovpn"

  echo "$config" > $filename
  echo -e "<cert>\n$client_crt\n</cert>\n" >> $filename
  echo -e "<key>\n$client_key\n</key>\n" >> $filename

  echo "$username VPN client configuration file created in $dirname directory"
}

function create_secret_ssm_param {
  secret_id="$1"
  value="$2"
  set +e
  aws ssm get-parameter --region $AWS_DEFAULT_REGION --name $secret_id | jq -r ".Parameter.Value" > /dev/null
  if [[ $? == 0 ]]; then
    echo "Secret at $secret_id already exists"
  else
    set -e
    echo "Secret does not exists. Creating $secret_id"
    aws ssm put-parameter \
     --region $AWS_DEFAULT_REGION \
     --name $secret_id \
     --type SecureString \
     --overwrite \
     --value "$value"
  fi
}

function generate_secret_ssm_param {
  value=$(openssl rand -base64 24  | tr -d "/@\'+")
  create_secret_ssm_param $1 $value
}

function generate_username_ssm_param {
  set +e
  value=$(< /dev/urandom tr -dc a-z | head -c12)
  set -e
  create_secret_ssm_param "$1" "$value"
}

function create_ssm_param {
  value_id="$1"
  value="$2"
  set +e
  aws ssm get-parameter --region $AWS_DEFAULT_REGION --name $value_id | jq -r ".Parameter.Value"
  if [[ $? == 0 ]]; then
    echo "Value at $value_id already exists"
  else
    set -e
    echo "Value does not exists. Creating $value_id"
    aws ssm put-parameter \
     --region $AWS_DEFAULT_REGION \
     --name $value_id \
     --type String \
     --overwrite \
     --value "$value"
  fi
}

function generate_deductions_vpn_ssh_key {
  generate_ssh_key "/repo/user-input/ssh-id-rsa" "terraform/modules/ssh"
}

function generate_opentest_ssh_key {
  generate_ssh_key "/repo/user-input/opentest-ssh-id-rsa" "terraform/modules/mhs/cluster-network/opentest/ssh"
}

function generate_dns_ssh_key {
  generate_ssh_key "/repo/user-input/dns-ssh-id-rsa" "terraform/modules/mhs/cluster-network/dns/ssh"
}

function generate_ssh_key {
  secret_id=$1
  ssh_directory=$2
  mkdir -p ${ssh_directory}/
  if [[ ! -f "${ssh_directory}/id_rsa" ]]; then
    #TODO check aws authentication
    set +e
    id_rsa=$(aws ssm get-parameter --with-decryption --region $AWS_DEFAULT_REGION --name $secret_id | jq -r ".Parameter.Value")
    if [[ $? == 0 ]]; then
      echo "$id_rsa" > ${ssh_directory}/id_rsa
    else
      set -e
      ssh-keygen -f "${ssh_directory}/id_rsa" -q -N ""
    fi
    set -e
  fi
  chmod 0600 ${ssh_directory}/id_rsa
  ssh-keygen -y -f "${ssh_directory}/id_rsa" > "${ssh_directory}/id_rsa.pub"
  aws ssm put-parameter \
   --region $AWS_DEFAULT_REGION \
   --name $secret_id \
   --type SecureString \
   --overwrite \
   --value "`cat ${ssh_directory}/id_rsa`"
}

command="$1"
case "${command}" in
  _ssh_key)
      check_env
      #FIXME: should be in dev account _assume_environment_role $NHS_ENVIRONMENT
      generate_deductions_vpn_ssh_key
      generate_opentest_ssh_key
      generate_dns_ssh_key
      ;;
  ssh_key)
      dojo "./tasks _ssh_key"
      ;;
  _tf)
      check_env
      terraform init -backend-config key=${NHS_SERVICE}-${NHS_ENVIRONMENT}/terraform.tfstate
      bash
      ;;
  tf)
      dojo "./tasks _tf"
      ;;
  _tf_plan)
      _assume_environment_role $NHS_ENVIRONMENT
      ./tasks _ssh_key
      tf_plan "$2"
      ;;
  tf_plan)
      check_env
      dojo "./tasks _tf_plan $2"
      ;;
  _tf_plan_cross_account)
      _assume_environment_role $NHS_ENVIRONMENT
      tf_plan_cross_account "$2"
      ;;
  tf_plan_cross_account)
      check_env
      dojo "./tasks _tf_plan_cross_account $2"
      ;;
  _tf_plan_certs)
      _assume_environment_role $NHS_ENVIRONMENT
      tf_plan "$2" true
      ;;
  tf_plan_certs)
      check_env
      dojo "./tasks _tf_plan_certs $2"
      ;;
  _tf_apply_cross_account)
      _assume_environment_role $NHS_ENVIRONMENT
      tf_apply_cross_account
      ;;
  tf_apply_cross_account)
      check_env
      dojo "./tasks _tf_apply_cross_account"
      ;;
  _tf_apply)
      _assume_environment_role $NHS_ENVIRONMENT
      ./tasks _ssh_key
      tf_apply
      ;;
  tf_apply)
      check_env
      dojo "./tasks _tf_apply"
      ;;
  promote_docker_image)
      check_env
      promote_docker_image "mhs-unbound-dns:$MHS_IMAGE_TAG" "$NHS_ENVIRONMENT"
      ;;
  _wait_for_dns)
      check_env
      cluster_name=$2
      if [ -z $cluster_name ]; then
        echo "Please specify cluster name to verify"
      fi
      _assume_environment_role $NHS_ENVIRONMENT
      AWS_ACCOUNT_ID=$(aws sts get-caller-identity | jq -r .Account)
      DNS_SERVER_1=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/output/prm-deductions-infra/${cluster_name}-dns-ip-0")
      DNS_SERVER_1=$(echo "${DNS_SERVER_1}" | awk -F "," '{print $1}')
      DNS_SERVER_2=$(_get_aws_ssm_secret "/repo/${NHS_ENVIRONMENT}/output/prm-deductions-infra/${cluster_name}-dns-ip-1")
      DNS_SERVER_2=$(echo "${DNS_SERVER_2}" | awk -F "," '{print $1}')
      echo "Waiting for DNS servers ${DNS_SERVER_1} and ${DNS_SERVER_2} to be ready"

      rm -f ./retry
      curl https://raw.githubusercontent.com/kadwanev/retry/master/retry -o ./retry
      chmod +x retry

      SLEEP_TIME=1
      DIG_TIMEOUT=1
      TRIES=60
      ./retry -v --tries=$TRIES --sleep=$SLEEP_TIME "1>&2 dig +timeout=$DIG_TIMEOUT redhat.com @${DNS_SERVER_1} & dig +timeout=$DIG_TIMEOUT redhat.com @${DNS_SERVER_1} | grep 'Got answer'"
      ./retry -v --tries=$TRIES --sleep=$SLEEP_TIME "1>&2 dig +timeout=$DIG_TIMEOUT redhat.com @${DNS_SERVER_2} & dig +timeout=$DIG_TIMEOUT redhat.com @${DNS_SERVER_2} | grep 'Got answer'"

      if [ "${NHS_ENVIRONMENT}" == "test" ]; then
        echo "Querying for private domain on HSCN network: nww.int.spine2.ncrs.nhs.uk"
        dig nww.int.spine2.ncrs.nhs.uk @${DNS_SERVER_1} | grep 'Got answer'
        dig nww.int.spine2.ncrs.nhs.uk @${DNS_SERVER_2} | grep 'Got answer'
        echo "OK. Received reply for an HSCN domain"
      fi
      ;;
  wait_for_dns)
      dojo "./tasks _wait_for_dns $2"
      ;;
  _create_secrets)
      generate_username_ssm_param "/repo/${NHS_ENVIRONMENT}/user-input/gp-to-repo-db-username"
      generate_secret_ssm_param "/repo/${NHS_ENVIRONMENT}/user-input/gp-to-repo-db-password"
      generate_username_ssm_param "/repo/${NHS_ENVIRONMENT}/user-input/repo-to-gp-db-username"
      generate_secret_ssm_param "/repo/${NHS_ENVIRONMENT}/user-input/repo-to-gp-db-password"
      generate_username_ssm_param "/repo/${NHS_ENVIRONMENT}/user-input/mq-admin-username"
      generate_secret_ssm_param "/repo/${NHS_ENVIRONMENT}/user-input/mq-admin-password"
      generate_username_ssm_param "/repo/${NHS_ENVIRONMENT}/user-input/mq-app-username"
      generate_secret_ssm_param "/repo/${NHS_ENVIRONMENT}/user-input/mq-app-password"
      ;;
  create_secrets)
      # Needs to run only once, when adding new environment
      check_env
      dojo "./tasks _create_secrets"
      ;;
  _generate_vpn_ca)
      generate_vpn_ca
      ;;
  generate_vpn_ca)
      dojo "./tasks _generate_vpn_ca"
      ;;
  _generate_vpn_server_crt)
      generate_vpn_server_crt
      ;;
  generate_vpn_server_crt)
      dojo "./tasks _generate_vpn_server_crt"
      ;;
  _generate_vpn_client_crt)
      _assume_environment_role $NHS_ENVIRONMENT
      generate_vpn_client_crt "$2"
      ;;
  generate_vpn_client_crt)
      check_env
      dojo "./tasks _generate_vpn_client_crt $2"
      ;;
  _test_keys)
      cd key-rotation-and-generation
      npm install
      npm run test
      ;;
  test_keys)
      dojo -c Dojofile-node "./tasks _test_keys"
      ;;
  _generate_keys)
      cd key-rotation-and-generation
      npm install
      npm run generate:keys
      ;;
  generate_keys)
      check_env
      _assume_environment_role $NHS_ENVIRONMENT
      dojo -c Dojofile-node "./tasks _generate_keys"
      ;;
  _rotate_keys)
      cd key-rotation-and-generation
      npm install
      npm run rotate:keys
      ;;
  rotate_keys)
      check_env
      _assume_environment_role $NHS_ENVIRONMENT
      dojo -c Dojofile-node "./tasks _rotate_keys"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
