#!/bin/bash -e

## Install OpenVPN

yum -y update
yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
yum -y install openvpn haproxy

aws s3 cp s3://${OPENTEST_ASSETS_BUCKET}/opentest-${CLUSTER_NAME}-vpn-client.conf opentest-${CLUSTER_NAME}-vpn-client.conf

mkdir -p /etc/openvpn
mv opentest-${CLUSTER_NAME}-vpn-client.conf /etc/openvpn/opentest-client.conf

systemctl enable openvpn@opentest-client
systemctl start openvpn@opentest-client

## Enable IP forwarding so any packet delivered to the gateway will be forwarded

cat <<EOF > /etc/sysctl.d/10-enable-ip-forward.conf
net.ipv4.ip_forward=1
EOF

echo "1" > /proc/sys/net/ipv4/ip_forward

## Enable Source NAT (via MASQUERADE) so packets from the VPN are routed back to the gateway

mkdir /etc/iptables

cat <<EOF > /etc/iptables/iptables.rules
# Generated by iptables-save v1.4.21 on Fri Feb  1 16:25:48 2019
*nat
:PREROUTING ACCEPT [8:424]
:INPUT ACCEPT [1:60]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -o tap0 -j MASQUERADE
COMMIT
EOF

cat <<EOF > /usr/lib/systemd/system/iptables.service
[Unit]
Description=Packet Filtering Framework

[Service]
Type=oneshot
ExecStart=/usr/sbin/iptables-restore /etc/iptables/iptables.rules
ExecReload=/usr/sbin/iptables-restore /etc/iptables/iptables.rules
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF

systemctl enable iptables
systemctl start iptables

cat <<EOF > /etc/haproxy/haproxy.cfg
#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    tcp
    log                     global
    option                  tcplog
    option                  dontlog-normal
    option                  tcpka
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           5s

#---------------------------------------------------------------------
# frontend which proxys raw/ssl request to the backends
#---------------------------------------------------------------------

frontend https
    bind :::443 v4v6
    default_backend local_https

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }

#---------------------------------------------------------------------
# balancing between the various backends
#---------------------------------------------------------------------

backend local_https
   # maximum SSL session ID length is 32 bytes.
   stick-table type binary len 32 size 30k expire 30m

   acl clienthello req_ssl_hello_type 1
   acl serverhello rep_ssl_hello_type 2

   # use tcp content accepts to detects ssl client and server hello.
   tcp-request inspect-delay 5s
   tcp-request content accept if clienthello

   # no timeout on response inspect delay by default.
   tcp-response content accept if serverhello

   # SSL session ID (SSLID) may be present on a client or server hello.
   # Its length is coded on 1 byte at offset 43 and its value starts
   # at offset 44.
   # Match and learn on request if client hello.
   stick on payload_lv(43,1) if clienthello

   # learn on response if server hello.
   stick store-response payload_lv(43,1) if serverhello

   server mhs_inbound_nlb ${MHS_INBOUND_DOMAIN_NAME}:443
EOF

systemctl start haproxy
systemctl enable haproxy